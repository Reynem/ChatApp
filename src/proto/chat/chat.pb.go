// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v6.32.0
// source: src/proto/chat.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChatMessageText struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessageText) Reset() {
	*x = ChatMessageText{}
	mi := &file_src_proto_chat_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessageText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageText) ProtoMessage() {}

func (x *ChatMessageText) ProtoReflect() protoreflect.Message {
	mi := &file_src_proto_chat_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageText.ProtoReflect.Descriptor instead.
func (*ChatMessageText) Descriptor() ([]byte, []int) {
	return file_src_proto_chat_proto_rawDescGZIP(), []int{0}
}

func (x *ChatMessageText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ChatMessageText) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ChatMessageAudio struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Audio         []byte                 `protobuf:"bytes,1,opt,name=audio,proto3" json:"audio,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessageAudio) Reset() {
	*x = ChatMessageAudio{}
	mi := &file_src_proto_chat_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessageAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageAudio) ProtoMessage() {}

func (x *ChatMessageAudio) ProtoReflect() protoreflect.Message {
	mi := &file_src_proto_chat_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageAudio.ProtoReflect.Descriptor instead.
func (*ChatMessageAudio) Descriptor() ([]byte, []int) {
	return file_src_proto_chat_proto_rawDescGZIP(), []int{1}
}

func (x *ChatMessageAudio) GetAudio() []byte {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *ChatMessageAudio) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      bool                   `protobuf:"varint,1,opt,name=response,proto3" json:"response,omitempty"`
	ResponseText  string                 `protobuf:"bytes,2,opt,name=response_text,json=responseText,proto3" json:"response_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_src_proto_chat_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_src_proto_chat_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_src_proto_chat_proto_rawDescGZIP(), []int{2}
}

func (x *Ack) GetResponse() bool {
	if x != nil {
		return x.Response
	}
	return false
}

func (x *Ack) GetResponseText() string {
	if x != nil {
		return x.ResponseText
	}
	return ""
}

var File_src_proto_chat_proto protoreflect.FileDescriptor

const file_src_proto_chat_proto_rawDesc = "" +
	"\n" +
	"\x14src/proto/chat.proto\x12\valexchatapp\">\n" +
	"\x0fChatMessageText\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"A\n" +
	"\x10ChatMessageAudio\x12\x14\n" +
	"\x05audio\x18\x01 \x01(\fR\x05audio\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"F\n" +
	"\x03Ack\x12\x1a\n" +
	"\bresponse\x18\x01 \x01(\bR\bresponse\x12#\n" +
	"\rresponse_text\x18\x02 \x01(\tR\fresponseText2\x8f\x01\n" +
	"\vChatService\x12>\n" +
	"\fSendChatText\x12\x1c.alexchatapp.ChatMessageText\x1a\x10.alexchatapp.Ack\x12@\n" +
	"\rSendChatAudio\x12\x1d.alexchatapp.ChatMessageAudio\x1a\x10.alexchatapp.AckB\x16Z\x14src/proto/chat;protob\x06proto3"

var (
	file_src_proto_chat_proto_rawDescOnce sync.Once
	file_src_proto_chat_proto_rawDescData []byte
)

func file_src_proto_chat_proto_rawDescGZIP() []byte {
	file_src_proto_chat_proto_rawDescOnce.Do(func() {
		file_src_proto_chat_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_src_proto_chat_proto_rawDesc), len(file_src_proto_chat_proto_rawDesc)))
	})
	return file_src_proto_chat_proto_rawDescData
}

var file_src_proto_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_src_proto_chat_proto_goTypes = []any{
	(*ChatMessageText)(nil),  // 0: alexchatapp.ChatMessageText
	(*ChatMessageAudio)(nil), // 1: alexchatapp.ChatMessageAudio
	(*Ack)(nil),              // 2: alexchatapp.Ack
}
var file_src_proto_chat_proto_depIdxs = []int32{
	0, // 0: alexchatapp.ChatService.SendChatText:input_type -> alexchatapp.ChatMessageText
	1, // 1: alexchatapp.ChatService.SendChatAudio:input_type -> alexchatapp.ChatMessageAudio
	2, // 2: alexchatapp.ChatService.SendChatText:output_type -> alexchatapp.Ack
	2, // 3: alexchatapp.ChatService.SendChatAudio:output_type -> alexchatapp.Ack
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_src_proto_chat_proto_init() }
func file_src_proto_chat_proto_init() {
	if File_src_proto_chat_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_src_proto_chat_proto_rawDesc), len(file_src_proto_chat_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_src_proto_chat_proto_goTypes,
		DependencyIndexes: file_src_proto_chat_proto_depIdxs,
		MessageInfos:      file_src_proto_chat_proto_msgTypes,
	}.Build()
	File_src_proto_chat_proto = out.File
	file_src_proto_chat_proto_goTypes = nil
	file_src_proto_chat_proto_depIdxs = nil
}
